/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.1.3"
        classpath "de.gematik:documentation-plugin:1.1.2"
    }
}

apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.publish"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"

group = 'de.gematik.ti'

gematikDocumentation {
    projectShortcut = "PCSCCRP"
    documentVersionReference = "version_cardreader_provider_pcsc"
}

gematikPublish {
    name = "PCSC-CardReaderProvider"
    description = "The PCSC CardReaderProvider implement the CardReaderProvider-API and add functionalities to use PCSC cardreader"
    gitHubProjectName = "ref-CardReaderProvider-PCSC"
}

jacoco {
    toolVersion = "0.8.4"
}

description = """PCSC-CardReaderProvider"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'
    implementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0-RC.4'
    implementation group: 'org.javassist', name: 'javassist', version: '3.24.0-GA'
    implementation group: 'org.greenrobot', name: 'eventbus', version: '3.1.1'

    implementation group: 'de.gematik.ti', name: 'cardreader.provider.api', version: '1.2.1'
    implementation group: 'de.gematik.ti', name: 'utils', version: '1.2.1'

    implementation "org.yaml:snakeyaml:1.9"

    runtime group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.sonarsource.java', name: 'sonar-jacoco-listeners', version: '3.8'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
    testImplementation group: 'org.powermock', name: 'powermock-classloading-base', version: '2.0.2'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '3.1.6'

    testImplementation group: 'de.gematik.ti', name: 'test.utils', version: '1.1.1'
}

task sourceJar(type: Jar) {
    classifier "sources"
    from "${project.buildDir}/../src/main/java/"
    include "**/*.java"
}
task testSourceJar(type: Jar) {
    classifier "test-sources"
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}
task adocJar(type: Jar) {
    classifier "adoc"
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"

}
task javadocJar(type: Jar) {
    classifier "javadoc"
    from "${project.buildDir}/docs/javadoc/"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}

test {
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}
